# -*- coding: utf-8 -*-
"""Actividad #1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14J9B9UwnatIJi804MwdcLQkpRSnAvsOe

**Mental Health in Tech Survey**

*   **Objetivo del dataset:** La encuesta tiene como objetivo recopilar datos sobre una población específica, que pueden ser encuestas relacionadas con la salud mental en tecnología, dado que mencionaste que el archivo es un dataset de encuesta.
*   **Características:** Este archivo contiene tanto variables cualitativas como cuantitativas, que probablemente incluyan respuestas de encuestados sobre factores de salud mental, experiencia laboral, ubicación geográfica, entre otros.
*   **Variable objetivo:** Dependiendo de la finalidad del análisis, la variable objetivo puede variar. Si estás analizando el impacto de la salud mental, esta sería una variable clave a analizar.
"""

import pandas as pd

# Cargar el archivo CSV
df = pd.read_csv('/content/survey.csv')

#Punto B: Listar las filas del dataframe
df

#Punto C: Funcion que muestra los primeros 7 datos del dataframe
df.head(7)

#Punto D: Muestra los últimos 7 datos del dataframe
df.tail(7)

#Punto E: Analiza los tipos de datos de las columnas
df.dtypes

#Punto F: Contar los datos faltantes por columna
missing_data = df.isnull().sum()
print(missing_data)

"""La estrategia que se puede aplicar en este caso es la Eliminación de filas o columnas:

Si una columna tiene un porcentaje muy alto de datos faltantes (por ejemplo, más del 30%), puede ser mejor eliminarla. Y como en este caso los items que cumplen con esta condición son los de comentarios (datos que son irrelevantes para el analisis) y el estado (es basicamente la ciudad del pais donde residen estas personas, datos que en general se pueden despreciar).

Estos dos datos se proceden a eliminar y ya se resolveria el problema de manera adecuada.
"""

#Calcula el porcentaje
total = df.shape[0]
missing_percentage = (missing_data / total) * 100
print(missing_percentage)

#Punto G: Obtiene una descripción de las columnas numéricas (valores mínimos y máximos, los percentiles uno a tres y la desviación estándar)
df.describe()

#Punto H: Elijo las columnas Age, Wellness_program y coworkers y saca la descripcion
#de esas tres utilizando describe()
columnas_interes = ['Age', 'wellness_program', 'coworkers']

df_interes = df[columnas_interes]

columnas_numericas = df_interes.select_dtypes(include=['number']).columns
columnas_categoricas = df_interes.select_dtypes(include=['object', 'category']).columns

descripcion_numericas = df_interes[columnas_numericas].describe()

descripcion_categoricas = df_interes[columnas_categoricas].describe()

print("Descripción de las columnas numéricas:")
print(descripcion_numericas)

print("\nDescripción de las columnas categóricas:")
print(descripcion_categoricas)

# Punto I: Define una función para mostrar información concisa del DataFrame
def mostrar_info_concisa(df):
    print("Información del DataFrame:\n")
    df.info() #muestra nombres de las columnas, cuenta de elementos no nulos, tipos de datos y memoria usada

mostrar_info_concisa(df)